openapi: 3.0.0

info:
  title: V2com Library Training API
  description: "API for library management, including users, books, loans, and reservations."
  version: 1.0.0

servers:
- url: /api/v1

paths:
  /auth/login:
    post:
      summary: Login
      tags:
      - Auth Controller
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginDTO"
        required: true
      responses:
        "200":
          description: OK
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          description: User not found!
        "406":
          description: Password is incorrect!
  /users:
    get:
      summary: Get Users By Filter
      tags:
      - User Controller
      parameters:
        - in: query
          name: Name
          description: Name of the user beeing searched.
          schema:
            type: string
        - in: query
          name: Email
          description: E-mail of the user beeing searched.
          schema:
            type: string
            format: email
        - in: query
          name: Role
          description: Role of the user beeing searched.
          schema:
            type: string
            enum: ["USER", "ADMIN"]
      responses:
        "200":
          description: OK!
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          description: User not found!
        "406":
          description: One or more filters are invalid!
    post:
      summary: Create User
      tags:
      - User Controller
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/userDTO"
        required: true
      responses:
        "201":
          description: User created!
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "406":
          description: Some of the required data is missing!
  /users/{userId}:
    patch:
      summary: Update User
      tags:
      - User Controller
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/userDTO"
            examples:
              updateName:
                summary: Update only the name
                value:
                  name: Andre
              nameAndEmail:
                summary: Update name and e-mail
                value:
                  name: Andre
                  email: andremacias@hotmail.com
              updateAll:
                summary: Update All
                value:
                  name: Andre
                  email: andremacias@hotmail.com
                  password: Andre321
                  role: ADMIN
        required: true
      responses:
        "200":
          description: User updated!
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          description: User not found!
    get:
      summary: Get User By Id
      tags:
      - User Controller
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: User found!
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          description: User not found!
    delete:
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "410":
          description: Used deleted!
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          description: User not found!
      summary: Delete User
      tags:
      - User Controller
  /books:
    get:
      summary: Get Books By Filter
      tags:
      - Book Controller
      parameters:
        - in: query
          name: title
          description: Title of the book(s) beeing searched.
          schema:
            type: string
            example: The Great Gatsby
        - in: query
          name: author
          description: Author of the book(s) beeing searched.
          schema:
            type: string
            example: F. Scott Fitzgerald
        - in: query
          name: isbn
          description: ISBN is a code made up of 13 numbers, type only the numbers!
          schema:
            type: string
            example: 9780743273565
        - in: query
          name: isAvailable
          description: Availability of the book.
          schema:
            type: boolean
            example: true
        - in: query
          name: publicationDate
          description: Date that book was published.
          schema:
            type: string
            format: YYYY-MM-DD
            example: 1925-04-10
      responses:
        "200":
          description: Book(s) found!
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          description: Book(s) not found!
        "406":
          description: One or more filters are invalid!
    post:
      summary: Create Book
      tags:
      - Book Controller
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/bookDTO"
        required: true
      responses:
        "201":
          description: Book created!
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "406":
          description: Data is required!
  /books/{bookId}:
    patch:
      summary: Update Book
      tags:
      - Book Controller
      parameters:
      - name: bookId
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/bookDTO"
            examples:
              updateTitle:
                summary: Update only the title
                value:
                  title: New Book Title
              updateAuthor:
                summary: Update only the author
                value:
                  author: New Author Name
              updateAll:
                summary: Update all fields
                value:
                  title: New Book Title
                  author: New Author Name
                  isbn: 1234567890123
                  publicationDate: 2023-10-01
                  isAvailable: false
        required: true
      responses:
        "200":
          description: Book updated!
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          description: Book not found!
    get:
      summary: Get Book By Id
      tags:
      - Book Controller
      parameters:
      - name: bookId
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: Book found!
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          description: Book not found!
    delete:
      summary: Delete Book
      tags:
      - Book Controller
      parameters:
      - name: bookId
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "410":
          description: Book deleted!
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          description: Book not found!
  /loans:
    get:
      summary: Get Loans By Filters
      tags:
      - Loan Controller
      parameters:
        - in: query
          name: user
          description: User ID of the loan(s) being searched.
          schema:
            type: string
            format: uuid
            example: a7a53b81-1283-4de0-b532-783fe0916c5e
        - in: query
          name: book
          description: Book ID of the loan(s) being searched.
          schema:
            type: string
            format: uuid
            example: 1e2f3a4b-5c6d-4e8f-9a0b-1c2d3e4f5a6b
        - in: query
          name: loanDate
          description: Date the book was loaned.
          schema:
            type: string
            format: date
            example: 2025-03-10
        - in: query
          name: loanDueDate
          description: Due date for the loan.
          schema:
            type: string
            format: date
            example: 2025-04-09
        - in: query
          name: returnDate
          description: Date the book was returned.
          schema:
            type: string
            format: date
            example: 2025-04-01
        - in: query
          name: loanStatus
          description: Status of the loan.
          schema:
            type: string
            enum: ["ACTIVE", "RETURNED", "LATE"]
            example: ACTIVE
      responses:
        "200":
          description: Loans found!
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          description: Loan(s) not found!
        "406":
          description: One or more filters are invalid!
    post:
      summary: Create Loan
      tags:
      - Loan Controller
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoanDTO"
        required: true
      responses:
        "201":
          description: Loan registered!
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          description: User or book not found!
        "409":
          description: User already has a loan!
        "406":
          description: Loan date is null!
        "500":
          description: Server error
  /loans/{loanId}:
    patch:
      summary: Update Loan
      tags:
      - Loan Controller
      parameters:
      - name: loanId
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoanDTO"
        required: true
      responses:
        "200":
          description: Loan updated!
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          description: Loan, user, or book not found!
        "500":
          description: Server error
    get:
      summary: Get Loan By Id
      tags:
      - Loan Controller
      parameters:
      - name: loanId
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: Loan found!
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          description: Loan not found!
        "500":
          description: Server error
    delete:
      summary: Delete Loan
      tags:
      - Loan Controller
      parameters:
      - name: loanId
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "410":
          description: Loan deleted!
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          description: Loan, user, or book not found!
        "500":
          description: Server error
  /reservations:
    get:
      summary: Get Reservations By Filters
      tags:
      - Reservation Controller
      parameters:
        - in: query
          name: user
          description: User ID of the reservation(s) being searched.
          schema:
            type: string
            format: uuid
            example: a7a53b81-1283-4de0-b532-783fe0916c5e
        - in: query
          name: book
          description: Book ID of the reservation(s) being searched.
          schema:
            type: string
            format: uuid
            example: 1e2f3a4b-5c6d-4e8f-9a0b-1c2d3e4f5a6b
        - in: query
          name: reservationDate
          description: Date the book was reserved.
          schema:
            type: string
            format: date
            example: 2025-03-10
        - in: query
          name: status
          description: Status of the reservation.
          schema:
            type: string
            enum: ["PENDING", "CONFIRMED", "CANCELLED"]
            example: PENDING
      responses:
        "200":
          description: Reservations found!
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          description: Reservation(s) not found!
        "406":
          description: One or more filters are invalid!
    post:
      summary: Create Reservation
      tags:
      - Reservation Controller
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReservationDTO"
        required: true
      responses:
        "201":
          description: Reservation registered!
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          description: User or book not found!
        "409":
          description: Reservation date is null!
        "403":
          description: User already has a reservation!
        "500":
          description: Server error
  /reservations/{reservationId}:
    patch:
      summary: Update Reservation
      tags:
      - Reservation Controller
      parameters:
      - name: reservationId
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReservationDTO"
        required: true
      responses:
        "200":
          description: Reservation updated!
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          description: Reservation, user, or book not found!
        "500":
          description: Server error
    get:
      summary: Get Reservation By Id
      tags:
      - Reservation Controller
      parameters:
      - name: reservationId
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: Reservation found!
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          description: Reservation not found!
        "500":
          description: Server error
    delete:
      summary: Delete Reservation
      tags:
      - Reservation Controller
      parameters:
      - name: reservationId
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "410":
          description: Reservation deleted!
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          description: Reservation, user, or book not found!
        "500":
          description: Server error
components:
  responses:
    UnauthorizedError:
      description: Unauthorized access... You must login first! 
    ForbiddenError:
      description: Forbidden access... You must be an Administrator to execute this!
  schemas:
    LoginDTO:
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
          format: email
          example: nicolas@example.com
        password:
          minLength: 1
          type: string
          format: password
          example: 123321
    userDTO:
      required:
      - name
      - email
      - password
      type: object
      properties:
        name:
          minLength: 1
          type: string
          example: Nicolas
        email:
          type: string
          format: email
          example: nicolas@example.com
        password:
          minLength: 1
          type: string
          format: password
          description: Afterwards the password will be hashed.
          example: 123321
        role:
          $ref: "#/components/schemas/UserRole"
    bookDTO:
      required:
      - title
      - author
      - isAvailable
      type: object
      properties:
        title:
          minLength: 1
          type: string
          example: Shadow and Bones
        author:
          minLength: 1
          type: string
          example: Lindsey Macran
        isbn:
          type: string
          minLength: 1
          maxLength: 13
          example: 1234567891011
        publicationDate:
          $ref: "#/components/schemas/Date"
        isAvailable:
          type: boolean
          example: true
    LoanDTO:
      required:
      - userId
      - bookId
      - loanDate
      type: object
      properties:
        userId:
          $ref: "#/components/schemas/UUID"
          example: a7a53b81-1283-4de0-b532-783fe0916c5e
        bookId:
          $ref: "#/components/schemas/UUID"
          example: 1e2f3a4b-5c6d-4e8f-9a0b-1c2d3e4f5a6b
        loanDate:
          $ref: "#/components/schemas/Date"
          description: Day that book was loaned.
        loanDueDate:
          $ref: "#/components/schemas/Date"
          description: By default will get the actual date + 30 days, if nothing is defined.
        returnDate:
          $ref: "#/components/schemas/Date"
          description: Date that book was return to the library.
        loanStatus:
          $ref: "#/components/schemas/LoanStatus"
          description: | 
                        When loaned, will be defined as "ACTIVE", when updated the following rules will be applied:
                        - If the return date is equals the current date OR return date is before current date, then status is "RETURNED"
                        - If the return date is after loan return date OR (return date is null AND loan due date is after current date), then status is "LATE"
                        - Else the status is defined by what as defined in update request body, if nothing was defined, catch the actual status before update.
          example: ACTIVE           
    ReservationDTO:
      required:
      - userId
      - bookId
      type: object
      properties:
        userId:
          $ref: "#/components/schemas/UUID"
        bookId:
          $ref: "#/components/schemas/UUID"
        reservationDate:
          $ref: "#/components/schemas/Date"
          description: Date that book is beeing reserverd, by default can be null in the request body, it wiil be defined as the currant date.
        status:
          $ref: "#/components/schemas/ReservationStatus"
          description: Status of the reservation, by default can be null in the request body, it will be defined as "PEDING".
          example: CONFIRMED
    UserRole:
      enum:
      - USER
      - ADMIN
      type: string
    LoanStatus:
      enum:
      - ACTIVE
      - RETURNED
      - LATE
      type: string
    ReservationStatus:
      enum:
      - PENDING
      - CONFIRMED
      - CANCELED
      type: string
    Date:
      format: date
      type: string
      example: 2025-03-10
    UUID:
      format: uuid
      pattern: "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
      type: string
  securitySchemes:
    SecurityScheme:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - SecurityScheme: []